generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

model School {
    id   String @id @default(cuid())
    name String @unique

    users User[] @relation("school-users")
    clubs Club[] @relation("school-clubs")
    // tags Tag[] @relation("school-tags") // is this needed?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id       String  @id @default(cuid())
    // username and email don't need to be unique only unique to school
    ccid     String  @unique
    username String  @unique
    email    String  @unique
    password String
    avatar   String?
    role     Role    @default(STUDENT)

    school   School @relation("school-users", fields: [schoolId], references: [id])
    schoolId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Club {
    id     String     @id @default(cuid())
    slug   String     @unique
    type   ClubType   @default(CLUB)
    status ClubStatus @default(INACTIVE)

    // General
    name            String       @unique
    description     String?
    availability    Availability @default(OPEN)
    applicationLink String?
    tags            Tag[]

    // Meeting Information
    meetingFrequency String?
    meetingTime      String?
    meetingDays      String?
    meetingLocation  String?

    // Contact Information
    contactEmail String
    instagram    String?
    facebook     String?
    twitter      String?
    website      String?

    // Members
    president     String
    vicePresident String?
    secretary     String?
    treasurer     String?
    advisor       String

    school   School @relation("school-clubs", fields: [schoolId], references: [id])
    schoolId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tag {
    id    String @id @default(cuid())
    name  String @unique
    clubs Club[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Availability {
    OPEN
    CLOSED
    APPLICATION
}

enum Role {
    ADMIN
    STUDENT
}

enum ClubRole {
    PRESIDENT
    VICE_PRESIDENT
    SECRETARY
    TREASURER
    ADVISOR
    MEMBER
}

enum ClubType {
    CLUB
    ORGANIZATION
}

enum ClubStatus {
    ACTIVE
    INTEREST
    INACTIVE
}
